{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/lib/database.ts"],"sourcesContent":["import fs from 'fs/promises';\nimport path from 'path';\nimport { User, UserWithoutPassword } from '@/types/auth';\n\nconst DB_PATH = path.join(process.cwd(), 'src/data/users.json');\n\n// Initialize database file if it doesn't exist\nasync function initializeDB() {\n  try {\n    await fs.access(DB_PATH);\n  } catch {\n    // File doesn't exist, create it with empty array\n    await fs.writeFile(DB_PATH, JSON.stringify([], null, 2));\n  }\n}\n\n// Read all users from database\nexport async function getAllUsers(): Promise<User[]> {\n  await initializeDB();\n  try {\n    const data = await fs.readFile(DB_PATH, 'utf-8');\n    return JSON.parse(data) as User[];\n  } catch (error) {\n    console.error('Error reading users database:', error);\n    return [];\n  }\n}\n\n// Write users to database\nasync function writeUsers(users: User[]): Promise<void> {\n  try {\n    await fs.writeFile(DB_PATH, JSON.stringify(users, null, 2));\n  } catch (error) {\n    console.error('Error writing to users database:', error);\n    throw new Error('Failed to save user data');\n  }\n}\n\n// Find user by email\nexport async function findUserByEmail(email: string): Promise<User | null> {\n  const users = await getAllUsers();\n  return users.find(user => user.email.toLowerCase() === email.toLowerCase()) || null;\n}\n\n// Find user by ID\nexport async function findUserById(id: string): Promise<User | null> {\n  const users = await getAllUsers();\n  return users.find(user => user.id === id) || null;\n}\n\n// Create new user\nexport async function createUser(userData: Omit<User, 'id' | 'createdAt' | 'updatedAt'>): Promise<UserWithoutPassword> {\n  const users = await getAllUsers();\n  \n  // Check if user already exists\n  const existingUser = users.find(user => user.email.toLowerCase() === userData.email.toLowerCase());\n  if (existingUser) {\n    throw new Error('User with this email already exists');\n  }\n\n  const newUser: User = {\n    id: generateId(),\n    ...userData,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  };\n\n  users.push(newUser);\n  await writeUsers(users);\n\n  // Return user without password\n  const { password, ...userWithoutPassword } = newUser;\n  return userWithoutPassword;\n}\n\n// Update user\nexport async function updateUser(id: string, updates: Partial<Omit<User, 'id' | 'createdAt'>>): Promise<UserWithoutPassword | null> {\n  const users = await getAllUsers();\n  const userIndex = users.findIndex(user => user.id === id);\n  \n  if (userIndex === -1) {\n    return null;\n  }\n\n  users[userIndex] = {\n    ...users[userIndex],\n    ...updates,\n    updatedAt: new Date().toISOString(),\n  };\n\n  await writeUsers(users);\n\n  // Return user without password\n  const { password, ...userWithoutPassword } = users[userIndex];\n  return userWithoutPassword;\n}\n\n// Delete user\nexport async function deleteUser(id: string): Promise<boolean> {\n  const users = await getAllUsers();\n  const filteredUsers = users.filter(user => user.id !== id);\n  \n  if (filteredUsers.length === users.length) {\n    return false; // User not found\n  }\n\n  await writeUsers(filteredUsers);\n  return true;\n}\n\n// Generate unique ID\nfunction generateId(): string {\n  return Date.now().toString(36) + Math.random().toString(36).substr(2);\n}\n"],"names":[],"mappings":";;;;;;;;AAAA;AACA;;;AAGA,MAAM,UAAU,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI;AAEzC,+CAA+C;AAC/C,eAAe;IACb,IAAI;QACF,MAAM,qHAAA,CAAA,UAAE,CAAC,MAAM,CAAC;IAClB,EAAE,OAAM;QACN,iDAAiD;QACjD,MAAM,qHAAA,CAAA,UAAE,CAAC,SAAS,CAAC,SAAS,KAAK,SAAS,CAAC,EAAE,EAAE,MAAM;IACvD;AACF;AAGO,eAAe;IACpB,MAAM;IACN,IAAI;QACF,MAAM,OAAO,MAAM,qHAAA,CAAA,UAAE,CAAC,QAAQ,CAAC,SAAS;QACxC,OAAO,KAAK,KAAK,CAAC;IACpB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,OAAO,EAAE;IACX;AACF;AAEA,0BAA0B;AAC1B,eAAe,WAAW,KAAa;IACrC,IAAI;QACF,MAAM,qHAAA,CAAA,UAAE,CAAC,SAAS,CAAC,SAAS,KAAK,SAAS,CAAC,OAAO,MAAM;IAC1D,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,oCAAoC;QAClD,MAAM,IAAI,MAAM;IAClB;AACF;AAGO,eAAe,gBAAgB,KAAa;IACjD,MAAM,QAAQ,MAAM;IACpB,OAAO,MAAM,IAAI,CAAC,CAAA,OAAQ,KAAK,KAAK,CAAC,WAAW,OAAO,MAAM,WAAW,OAAO;AACjF;AAGO,eAAe,aAAa,EAAU;IAC3C,MAAM,QAAQ,MAAM;IACpB,OAAO,MAAM,IAAI,CAAC,CAAA,OAAQ,KAAK,EAAE,KAAK,OAAO;AAC/C;AAGO,eAAe,WAAW,QAAsD;IACrF,MAAM,QAAQ,MAAM;IAEpB,+BAA+B;IAC/B,MAAM,eAAe,MAAM,IAAI,CAAC,CAAA,OAAQ,KAAK,KAAK,CAAC,WAAW,OAAO,SAAS,KAAK,CAAC,WAAW;IAC/F,IAAI,cAAc;QAChB,MAAM,IAAI,MAAM;IAClB;IAEA,MAAM,UAAgB;QACpB,IAAI;QACJ,GAAG,QAAQ;QACX,WAAW,IAAI,OAAO,WAAW;QACjC,WAAW,IAAI,OAAO,WAAW;IACnC;IAEA,MAAM,IAAI,CAAC;IACX,MAAM,WAAW;IAEjB,+BAA+B;IAC/B,MAAM,EAAE,QAAQ,EAAE,GAAG,qBAAqB,GAAG;IAC7C,OAAO;AACT;AAGO,eAAe,WAAW,EAAU,EAAE,OAAgD;IAC3F,MAAM,QAAQ,MAAM;IACpB,MAAM,YAAY,MAAM,SAAS,CAAC,CAAA,OAAQ,KAAK,EAAE,KAAK;IAEtD,IAAI,cAAc,CAAC,GAAG;QACpB,OAAO;IACT;IAEA,KAAK,CAAC,UAAU,GAAG;QACjB,GAAG,KAAK,CAAC,UAAU;QACnB,GAAG,OAAO;QACV,WAAW,IAAI,OAAO,WAAW;IACnC;IAEA,MAAM,WAAW;IAEjB,+BAA+B;IAC/B,MAAM,EAAE,QAAQ,EAAE,GAAG,qBAAqB,GAAG,KAAK,CAAC,UAAU;IAC7D,OAAO;AACT;AAGO,eAAe,WAAW,EAAU;IACzC,MAAM,QAAQ,MAAM;IACpB,MAAM,gBAAgB,MAAM,MAAM,CAAC,CAAA,OAAQ,KAAK,EAAE,KAAK;IAEvD,IAAI,cAAc,MAAM,KAAK,MAAM,MAAM,EAAE;QACzC,OAAO,OAAO,iBAAiB;IACjC;IAEA,MAAM,WAAW;IACjB,OAAO;AACT;AAEA,qBAAqB;AACrB,SAAS;IACP,OAAO,KAAK,GAAG,GAAG,QAAQ,CAAC,MAAM,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,MAAM,CAAC;AACrE","debugId":null}},
    {"offset": {"line": 187, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/lib/auth.ts"],"sourcesContent":["import bcrypt from 'bcrypt';\nimport { SignJWT, jwtVerify } from 'jose';\nimport { cookies } from 'next/headers';\nimport { NextRequest } from 'next/server';\nimport { findUserByEmail, findUserById, createUser } from './database';\nimport { User, UserWithoutPassword, LoginCredentials, SignupData, AuthSession } from '@/types/auth';\n\nconst JWT_SECRET = new TextEncoder().encode(\n  process.env.JWT_SECRET || 'your-secret-key-change-this-in-production'\n);\nconst SALT_ROUNDS = 12;\nconst SESSION_DURATION = 7 * 24 * 60 * 60 * 1000; // 7 days in milliseconds\n\n// Hash password\nexport async function hashPassword(password: string): Promise<string> {\n  return bcrypt.hash(password, SALT_ROUNDS);\n}\n\n// Verify password\nexport async function verifyPassword(password: string, hashedPassword: string): Promise<boolean> {\n  return bcrypt.compare(password, hashedPassword);\n}\n\n// Create JWT token\nexport async function createToken(payload: AuthSession): Promise<string> {\n  return new SignJWT({\n    userId: payload.userId,\n    email: payload.email,\n    name: payload.name,\n    expiresAt: payload.expiresAt,\n  })\n    .setProtectedHeader({ alg: 'HS256' })\n    .setIssuedAt()\n    .setExpirationTime(new Date(payload.expiresAt))\n    .sign(JWT_SECRET);\n}\n\n// Verify JWT token\nexport async function verifyToken(token: string): Promise<AuthSession | null> {\n  try {\n    const { payload } = await jwtVerify(token, JWT_SECRET);\n    \n    // Validate payload structure\n    if (\n      typeof payload.userId === 'string' &&\n      typeof payload.email === 'string' &&\n      typeof payload.name === 'string' &&\n      typeof payload.expiresAt === 'number'\n    ) {\n      return {\n        userId: payload.userId,\n        email: payload.email,\n        name: payload.name,\n        expiresAt: payload.expiresAt,\n      };\n    }\n    \n    return null;\n  } catch (error) {\n    console.error('Token verification failed:', error);\n    return null;\n  }\n}\n\n// Sign up user\nexport async function signUp(data: SignupData): Promise<{ user: UserWithoutPassword; token: string }> {\n  // Hash password\n  const hashedPassword = await hashPassword(data.password);\n  \n  // Create user\n  const user = await createUser({\n    name: data.name,\n    email: data.email,\n    password: hashedPassword,\n  });\n\n  // Create session\n  const session: AuthSession = {\n    userId: user.id,\n    email: user.email,\n    name: user.name,\n    expiresAt: Date.now() + SESSION_DURATION,\n  };\n\n  const token = await createToken(session);\n\n  return { user, token };\n}\n\n// Sign in user\nexport async function signIn(credentials: LoginCredentials): Promise<{ user: UserWithoutPassword; token: string }> {\n  // Find user\n  const user = await findUserByEmail(credentials.email);\n  if (!user) {\n    throw new Error('Invalid email or password');\n  }\n\n  // Verify password\n  const isValidPassword = await verifyPassword(credentials.password, user.password);\n  if (!isValidPassword) {\n    throw new Error('Invalid email or password');\n  }\n\n  // Create session\n  const session: AuthSession = {\n    userId: user.id,\n    email: user.email,\n    name: user.name,\n    expiresAt: Date.now() + SESSION_DURATION,\n  };\n\n  const token = await createToken(session);\n\n  // Return user without password\n  const { password, ...userWithoutPassword } = user;\n  return { user: userWithoutPassword, token };\n}\n\n// Get current user from request\nexport async function getCurrentUser(request: NextRequest): Promise<UserWithoutPassword | null> {\n  const token = request.cookies.get('auth-token')?.value;\n  \n  if (!token) {\n    return null;\n  }\n\n  const session = await verifyToken(token);\n  if (!session || session.expiresAt < Date.now()) {\n    return null;\n  }\n\n  const user = await findUserById(session.userId);\n  if (!user) {\n    return null;\n  }\n\n  // Return user without password\n  const { password, ...userWithoutPassword } = user;\n  return userWithoutPassword;\n}\n\n// Get current user from server components\nexport async function getCurrentUserServer(): Promise<UserWithoutPassword | null> {\n  const cookieStore = await cookies();\n  const token = cookieStore.get('auth-token')?.value;\n  \n  if (!token) {\n    return null;\n  }\n\n  const session = await verifyToken(token);\n  if (!session || session.expiresAt < Date.now()) {\n    return null;\n  }\n\n  const user = await findUserById(session.userId);\n  if (!user) {\n    return null;\n  }\n\n  // Return user without password\n  const { password, ...userWithoutPassword } = user;\n  return userWithoutPassword;\n}\n\n// Set auth cookie\nexport async function setAuthCookie(token: string): Promise<void> {\n  const cookieStore = await cookies();\n  cookieStore.set('auth-token', token, {\n    httpOnly: true,\n    secure: process.env.NODE_ENV === 'production',\n    sameSite: 'lax',\n    maxAge: SESSION_DURATION / 1000, // Convert to seconds\n    path: '/',\n  });\n}\n\n// Clear auth cookie\nexport async function clearAuthCookie(): Promise<void> {\n  const cookieStore = await cookies();\n  cookieStore.delete('auth-token');\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 348, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/app/api/auth/me/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { getCurrentUser } from '@/lib/auth';\n\nexport async function GET(request: NextRequest) {\n  try {\n    const user = await getCurrentUser(request);\n    \n    if (!user) {\n      return NextResponse.json(\n        {\n          success: false,\n          message: 'Not authenticated',\n        },\n        { status: 401 }\n      );\n    }\n    \n    return NextResponse.json(\n      {\n        success: true,\n        user,\n      },\n      { status: 200 }\n    );\n  } catch (error) {\n    console.error('Get current user error:', error);\n    \n    return NextResponse.json(\n      {\n        success: false,\n        message: 'Failed to get user information',\n      },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,OAAO,MAAM,CAAA,GAAA,oHAAA,CAAA,iBAAc,AAAD,EAAE;QAElC,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBACE,SAAS;gBACT,SAAS;YACX,GACA;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT;QACF,GACA;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QAEzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,SAAS;QACX,GACA;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}